@startuml

title __CONTROL's Class Diagram__\n

  package  {
    package simulator.control {
      class AdapterManager {
          - adapterProfiles : ArrayList<Adapter>
          ~ interactor : SimulatorInteractor
          + AdapterManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class AdministrationManager {
          - interactor : SimulatorInteractor
          + AdministrationManager()
          + logIn()
          + logOut()
          + signOn()
          + retrieveSession()
      }
    }
  }
  

  package  {
    package simulator.control {
      class ComponentManager {
          - componentProfiles : ArrayList<Component>
          - interactor : SimulatorInteractor
          + ComponentManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class EventManager {
          - eventProfiles : ArrayList<Event>
          - interactor : SimulatorInteractor
          + EventManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class ExecutionManager {
          - interactor : SimulatorInteractor
          + ExecutionManager()
          + designSimulationMethod()
          + executeEventService()
          - estimateEventServiceSimulation()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IAdapterManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IAdministrationManager {
          {abstract} + logIn()
          {abstract} + logOut()
          {abstract} + signOn()
          {abstract} + retrieveSession()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IComponentManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IEventManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IExecutionManager {
          {abstract} + designSimulationMethod()
          {abstract} + executeEventService()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IQualityManager {
          {abstract} + startMonitoringService()
          {abstract} + stopMonitoringService()
          {abstract} + pauseMonitoringService()
          {abstract} + retrieveServiceQuality()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IServiceManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface ISimulationManager {
          {abstract} + chooseArchitectureDescription()
          {abstract} + chooseSystemProfile()
          {abstract} + startSimulation()
          {abstract} + stopSimulation()
          {abstract} + pauseSimulation()
          {abstract} + reportSimulation()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface ISourceManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface ISystemManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      interface IUserManager {
          {abstract} + registerProfile()
          {abstract} + deleteProfile()
          {abstract} + modifyProfile()
          {abstract} + retrieveProfile()
          {abstract} + isRegistered()
      }
    }
  }
  

  package  {
    package simulator.control {
      class QualityManager {
          - interactor : SimulatorInteractor
          + QualityManager()
          + startMonitoringService()
          + stopMonitoringService()
          + pauseMonitoringService()
          + retrieveServiceQuality()
      }
    }
  }
  

  package  {
    package simulator.control {
      class ServiceManager {
          - serviceProfiles : ArrayList<Service>
          - interactor : SimulatorInteractor
          + ServiceManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class SimulationManager {
          - interactor : SimulatorInteractor
          + SimulationManager()
          + SimulationManager()
          + chooseArchitectureDescription()
          + chooseSystemProfile()
          + startSimulation()
          + stopSimulation()
          + pauseSimulation()
          + reportSimulation()
      }
    }
  }
  

  package  {
    package simulator.control {
      class SimulatorInteractor {
          ~ adminManager : IAdministrationManager
          ~ systemManager : ISystemManager
          ~ userManager : IUserManager
          ~ sourceManager : ISourceManager
          ~ adapterManager : IAdapterManager
          ~ eventManager : IEventManager
          ~ serviceManager : IServiceManager
          ~ componentManager : IComponentManager
          ~ simulationManager : ISimulationManager
          ~ executionManager : IExecutionManager
          ~ qualityManager : IQualityManager
          + SimulatorInteractor()
          - initSimulator()
          + getSimulationManager()
          + getExecutionManager()
          + getQualityManager()
          + getAdminManager()
          + getSystemManager()
          + getUserManager()
          + getSourceManager()
          + getAdapterManager()
          + getEventManager()
          + getServiceManager()
          + getComponentManager()
          + signOn()
          + logIn()
          + logOut()
          + registerProfile()
          + registerProfile()
          + registerProfile()
          + registerProfile()
          + registerProfile()
          + registerProfile()
          + registerProfile()
          + chooseAd()
          + chooseSystemProfile()
          + startSimulation()
      }
    }
  }
  

  package  {
    package simulator.control {
      class SourceManager {
          - sourceProfiles : ArrayList<Source>
          - interactor : SimulatorInteractor
          + SourceManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class SystemManager {
          - systemProfiles : ArrayList<SystemProfile>
          - interactor : SimulatorInteractor
          + SystemManager()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  package  {
    package simulator.control {
      class UserManager {
          - userProfiles : ArrayList<UserProfile>
          - interactor : SimulatorInteractor
          + UserManager()
          + isRegistered()
          + registerProfile()
          + deleteProfile()
          + modifyProfile()
          + retrieveProfile()
      }
    }
  }
  

  AdapterManager -up-|> IAdapterManager
  AdministrationManager -up-|> IAdministrationManager
  ComponentManager -up-|> IComponentManager
  EventManager -up-|> IEventManager
  ExecutionManager -up-|> IExecutionManager
  QualityManager -up-|> IQualityManager
  ServiceManager -up-|> IServiceManager
  SimulationManager -up-|> ISimulationManager
  SimulationManager o-- SystemProfile : systemProfile
  SimulationManager o-- ArchitectureDescription : archDescription
  SourceManager -up-|> ISourceManager
  SystemManager -up-|> ISystemManager
  UserManager -up-|> IUserManager


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
